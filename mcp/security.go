package mcp

// Role defines the originator of a message in the conversation history.
type Role string

const (
	RoleSystem    Role = "system" // Instructions or context provided by the system/developer
	RoleUser      Role = "user"
	RoleAssistant Role = "assistant" // Messages generated by the LLM
	RoleTool      Role = "tool"      // Results returned from tool execution
)

// --- Security & Metadata Structures ---

// SecurityMetadata contains information used to verify the trust and integrity of components.
type SecurityMetadata struct {
	Source        string `json:"source,omitempty"`         // Origin of the data (e.g., "trusted-registry", "user-provided", "api-endpoint-v2")
	Signature     string `json:"signature,omitempty"`      // Cryptographic signature to verify authenticity/integrity (e.g., JWT, HMAC-SHA256)
	PublicKeyID   string `json:"public_key_id,omitempty"`  // Identifier for the key needed to verify the signature
	Version       string `json:"version,omitempty"`        // Version identifier for the tool description or other signed component
	IntegrityHash string `json:"integrity_hash,omitempty"` // Hash of the component itself (e.g., hash of the ToolDescription structure)
}

// ContextMetadata holds general metadata for the context snapshot.
type ContextMetadata struct {
	ClientID       string            `json:"client_id,omitempty"`       // Identifier for the end-user or client application
	SessionID      string            `json:"session_id,omitempty"`      // Identifier for the user's session
	TraceID        string            `json:"trace_id,omitempty"`        // Identifier for tracing requests across systems
	RequestingUser *UserIdentity     `json:"requesting_user,omitempty"` // Information about the user initiating the request
	CustomData     map[string]string `json:"custom_data,omitempty"`     // For application-specific metadata
}

// UserIdentity represents information about the end user.
type UserIdentity struct {
	UserID string         `json:"user_id"`
	Groups []string       `json:"groups,omitempty"`
	Claims map[string]any `json:"claims,omitempty"` // e.g., JWT claims
}

// SecurityPolicy defines rules and constraints for the interaction.
type SecurityPolicy struct {
	AllowedTools        []string `json:"allowed_tools,omitempty"`           // Explicit list of tools allowed (whitelist)
	DisallowedTools     []string `json:"disallowed_tools,omitempty"`        // Explicit list of tools disallowed (blacklist)
	RequiredToolSource  string   `json:"required_tool_source,omitempty"`    // Tools must originate from this source (e.g., "trusted-registry")
	MaxToolCallsPerTurn int      `json:"max_tool_calls_per_turn,omitempty"` // Limit on tool calls per assistant turn
	DataHandlingRules   string   `json:"data_handling_rules,omitempty"`     // Instructions or policy references for data privacy/handling
}
